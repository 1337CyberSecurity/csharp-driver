//
//  Copyright (C) 2016 DataStax, Inc.
//
//  Please see the license for details:
//  http://www.datastax.com/terms/datastax-dse-driver-license-terms
//
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Text;
using Dse;
using Dse.Graph;

namespace Dse
{
    /// <summary>
    /// Represents the configuration of a <see cref="DseCluster"/>.
    /// </summary>
    public class DseConfiguration
    {
        /// <summary>
        /// The version of the application using the created cluster instance.
        /// </summary>
        public string ApplicationVersion { get; }

        /// <summary>
        /// The name of the application using the created cluster instance.
        /// </summary>
        public string ApplicationName { get; }
        
        /// <summary>
        /// Specifies whether <see cref="ApplicationName"/> was generated by the driver.
        /// </summary>
        public bool ApplicationNameWasGenerated { get; }

        /// <summary>
        /// A unique identifier for the created cluster instance.
        /// </summary>
        public Guid ClusterId { get; }

        /// <summary>
        /// A unique identifier for the created cluster instance generated and used by the driver.
        /// </summary>
        internal Guid InternalClusterId { get; }

        /// <summary>
        /// To be replaced with CassandraConfiguration.AddressTranslator after CSHARP-444.
        /// </summary>
        internal IAddressTranslator AddressTranslator { get; set; }
        /// <summary>
        /// Gets the configuration related to DSE Cassandra Daemon.
        /// </summary>
        public Configuration CassandraConfiguration { get; protected set; }

        /// <summary>
        /// Gets the options related to graph instance.
        /// </summary>
        public GraphOptions GraphOptions { get; protected set; }

        /// <summary>
        /// Creates a new instance of <see cref="DseConfiguration"/>.
        /// </summary>
        public DseConfiguration(Configuration cassandraConfiguration, GraphOptions graphOptions)
        {
            CassandraConfiguration = cassandraConfiguration ?? throw new ArgumentNullException(nameof(cassandraConfiguration));
            GraphOptions = graphOptions ?? throw new ArgumentNullException(nameof(graphOptions));
        }

        internal DseConfiguration(
            Configuration cassandraConfiguration,
            GraphOptions graphOptions,
            Guid clusterId,
            string appVersion,
            string appName,
            Guid internalClusterId,
            bool appNameWasGenerated) : this(cassandraConfiguration, graphOptions)
        {
            ClusterId = clusterId;
            ApplicationVersion = appVersion;
            ApplicationName = appName;
            InternalClusterId = internalClusterId;
            ApplicationNameWasGenerated = appNameWasGenerated;
        }
    }

    internal class IdentityAddressTranslator : IAddressTranslator
    {
        public IPEndPoint Translate(IPEndPoint address)
        {
            return address;
        }
    }
}
